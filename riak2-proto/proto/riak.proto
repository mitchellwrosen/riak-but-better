syntax = "proto2";

message ErrorResponse {
    required bytes errmsg = 1;
    required uint32 code = 2;
}

message GetServerInfoResponse {
    optional bytes node = 1;
    optional bytes version = 2;
}

message Pair {
    required bytes key = 1;
    optional bytes value = 2;
}

message GetBucketPropertiesRequest {
    required bytes bucket = 1;
    optional bytes type = 2;
}
message GetBucketPropertiesResponse {
    required BucketProperties props = 1;
}

message SetBucketPropertiesRequest {
    required bytes bucket = 1;
    required BucketProperties props = 2;
    optional bytes type = 3;
}

message ResetBucketPropertiesRequest {
    required bytes bucket = 1;
    optional bytes type = 2;
}

message GetBucketTypePropertiesRequest {
    required bytes type = 1;
}

message SetBucketTypePropertiesRequest {
    required bytes type = 1;
    required BucketProperties props = 2;
}

message ModuleFunction {
    required bytes module = 1;
    required bytes function = 2;
}

// May either be a modfun or a JavaScript named function
message CommitHook {
    optional ModuleFunction modfun = 1;
    optional bytes name = 2;
}

message BucketProperties {
    // Declared in riak_core_app
    optional uint32 n = 1;
    optional bool allow_mult = 2;
    optional bool last_write_wins = 3;
    repeated CommitHook precommit = 4;
    optional bool has_precommit = 5 [default = false];
    repeated CommitHook postcommit = 6;
    optional bool has_postcommit = 7 [default = false];
    optional ModuleFunction chash_keyfun = 8;

    // Declared in riak_kv_app
    optional ModuleFunction linkfun = 9;
    optional uint32 old_vclock = 10;
    optional uint32 young_vclock = 11;
    optional uint32 big_vclock = 12;
    optional uint32 small_vclock = 13;
    optional uint32 pr = 14;
    optional uint32 r = 15;
    optional uint32 w = 16;
    optional uint32 pw = 17;
    optional uint32 dw = 18;
    optional uint32 rw = 19;
    optional bool basic_quorum = 20;
    optional bool notfound_ok = 21;

    // Used by riak_kv_multi_backend
    optional bytes backend = 22;

    // Used by riak_search bucket fixup
    optional bool search = 23;

    // Used by riak_repl bucket fixup
    enum RpbReplMode {
        FALSE = 0;
        REALTIME = 1;
        FULLSYNC = 2;
        TRUE = 3;
    }
    optional RpbReplMode repl = 24;

    // Search index
    optional bytes search_index = 25;

    // KV Datatypes
    optional bytes datatype = 26;

    // KV strong consistency
    optional bool consistent = 27;

    // KV fast path
    optional bool write_once = 28;

    // Hyperlolog DT Precision
    optional uint32 hll_precision = 29;

    // KV sweeper object expiry time
    optional uint32 ttl = 30;
}

/* message AuthenticationRequest { */
/*     required bytes user = 1; */
/*     required bytes password = 2; */
/* } */

message MapKey {
    enum MapKeyType {
        COUNTER  = 1;
        SET      = 2;
        REGISTER = 3;
        FLAG     = 4;
        MAP      = 5;
    }

    required bytes      name = 1;
    required MapKeyType type = 2;
}

message MapValue {
    required MapKey field = 1;

    // At most one of these is not null, and if one is, it is per the above
    // type. But all may be null, e.g. a missing counter update means "increment
    // by 1".
    optional sint64   counter  = 2;
    repeated bytes    set      = 3;
    optional bytes    register = 4;
    optional bool     flag     = 5;
    repeated MapValue map      = 6;
}

message GetCrdtRequest {
    // The identifier: bucket, key and bucket-type
    required bytes bucket = 1;
    required bytes key    = 2;
    required bytes type   = 3;

    // Request options
    optional uint32 r             =  4;
    optional uint32 pr            =  5;
    optional bool   basic_quorum  =  6;
    optional bool   notfound_ok   =  7;
    optional uint32 timeout       =  8;
    optional bool   sloppy_quorum =  9;  // Experimental, may change/disappear
    optional uint32 n             = 10;  // Experimental, may change/disappear

    // For read-only requests or context-free operations, you can set
    // this to false to reduce the size of the response payload.
    optional bool include_context = 11 [default=true];
}


/*
 * The value of the fetched data type. If present in the response,
 * then empty values (sets, maps) should be treated as such.
 */
message Crdt {
    optional sint64   counter = 1;
    repeated bytes    set     = 2;
    repeated MapValue map     = 3;
    optional uint64   hll     = 4;
    repeated bytes    gset    = 5;
}


message GetCrdtResponse {
    enum CrdtType {
        COUNTER = 1;
        SET     = 2;
        MAP     = 3;
        HLL     = 4;
        GSET    = 5;
    }

    optional bytes    context = 1; // Returned if `include_context` was set
    required CrdtType type    = 2; // The type of the value, if it exists
    optional Crdt     value   = 3; // If missing, "not found"
}

message CounterUpdate {
    optional sint64 increment = 1; // Missing means increment by 1
}

message SetUpdate {
    repeated bytes adds    = 1;
    repeated bytes removes = 2;
}

message GSetUpdate {
    repeated bytes adds = 1;
}

message HllUpdate {
    repeated bytes adds = 1;
}

message MapValueUpdate {
    enum FlagUpdate {
        ENABLE  = 1;
        DISABLE = 2;
    }

    required MapKey field = 1;

    // Exactly one of these is not null, per the above type
    optional CounterUpdate counter_update  = 2;
    optional SetUpdate     set_update      = 3;
    optional bytes         register_update = 4;
    optional FlagUpdate    flag_update     = 5;
    optional MapUpdate     map_update      = 6;

}

message MapUpdate {
    repeated MapKey         removes = 1;
    repeated MapValueUpdate updates = 2;
}

// Exactly one of these is not null
message CrdtUpdate {
    optional CounterUpdate counter_update = 1;
    optional SetUpdate     set_update     = 2;
    optional MapUpdate     map_update     = 3;
    optional HllUpdate     hll_update     = 4;
    optional GSetUpdate    gset_update    = 5;
}

message UpdateCrdtRequest {
    required bytes bucket = 1;
    optional bytes key    = 2; // missing key results in server-assigned key, like KV
    required bytes type   = 3; // bucket type, not data-type (but the data-type is constrained per bucket-type)

    optional bytes context = 4;

    required CrdtUpdate update = 5;

    // Request options
    optional uint32 w               =  6;
    optional uint32 dw              =  7;
    optional uint32 pw              =  8;
    optional bool   return_body     =  9 [default=false];
    optional uint32 timeout         = 10;
    optional bool   sloppy_quorum   = 11;  // Experimental, may change/disappear
    optional uint32 n               = 12;  // Experimental, may change/disappear
    optional bool   include_context = 13 [default=true]; // When return_body is true, should the context be returned too?
}


message UpdateCrdtResponse {
    // The key, if assigned by the server
    optional bytes    key     = 1;

    // The opaque update context and value, if `return_body` was set
    optional bytes    context = 2;
    // Exactly one of these will be non-null (if `return_body` was set)
    optional sint64   counter = 3;
    repeated bytes    set     = 4;
    repeated MapValue map     = 5;
    optional uint64   hll     = 6;
    repeated bytes    gset    = 7;
}

message GetRequest {
    required bytes bucket         = 1;
    required bytes key            = 2;
    optional uint32 r             = 3;
    optional uint32 pr            = 4;
    optional bool basic_quorum    = 5;
    optional bool notfound_ok     = 6;
    optional bytes if_modified    = 7;    // fail if the supplied vclock does not match
    optional bool head            = 8;    // return everything but the value
    optional bool deleted_context = 9;    // return the tombstone's vclock, if applicable
    optional uint32 timeout       = 10;
    optional bool sloppy_quorum   = 11;   // Experimental, may change/disappear
    optional uint32 n             = 12;   // Experimental, may change/disappear
    optional bytes type           = 13;   // Bucket type, if not set we assume the 'default' type
}

message GetResponse {
    repeated Content content = 1;
    optional bytes context   = 2; // the opaque vector clock for the object
    optional bool unchanged  = 3;
}


// Put request - if options.return_body is set then the updated metadata/data for
//               the key will be returned.
message PutRequest {
    required bytes bucket         = 1;
    optional bytes key            = 2;
    optional bytes context        = 3;
    required Content content      = 4;
    optional uint32 w             = 5;
    optional uint32 dw            = 6;
    optional bool return_body     = 7;
    optional uint32 pw            = 8;
    optional bool if_not_modified = 9;
    optional bool if_none_match   = 10;
    optional bool return_head     = 11;
    optional uint32 timeout       = 12;
    optional bool asis            = 13;
    optional bool sloppy_quorum   = 14; // Experimental, may change/disappear
    optional uint32 n             = 15; // Experimental, may change/disappear
    optional bytes type           = 16; // Bucket type, if not set we assume the 'default' type
}

message PutResponse {
    repeated Content content = 1;
    optional bytes context   = 2; // the opaque vector clock for the object
    optional bytes key       = 3; // the key generated, if any
}


// Delete request
message DeleteRequest {
    required bytes bucket = 1;
    required bytes key = 2;
    optional uint32 rw = 3;
    optional bytes context = 4;
    optional uint32 r = 5;
    optional uint32 w = 6;
    optional uint32 pr = 7;
    optional uint32 pw = 8;
    optional uint32 dw = 9;
    optional uint32 timeout = 10;
    optional bool sloppy_quorum = 11; // Experimental, may change/disappear
    optional uint32 n = 12;       // Experimental, may change/disappear
    optional bytes type = 13;         // Bucket type, if not set we assume the 'default' type
}

message ListBucketsRequest {
    optional uint32 timeout = 1;
    optional bool stream = 2;
    optional bytes type = 3; // Bucket type, if not set we assume the 'default' type
}

message ListBucketsResponse {
    repeated bytes buckets = 1;
    optional bool done = 2; // False for every response but the last
}


message ListKeysRequest {
    required bytes bucket = 1;
    optional uint32 timeout = 2;
    optional bytes type = 3; // Bucket type, if not set we assume the 'default' type
}

message ListKeysResponse {
    repeated bytes keys = 1;
    optional bool done = 2; // False for every response but the last
}


// Map/Reduce request
/* message MapReduceRequest { */
/*     required bytes request = 1; */
/*     required bytes content_type = 2; */
/* } */

/* message MapReduceResponse { */
/*     optional uint32 phase = 1; */
/*     optional bytes response = 2; */
/*     optional bool done = 3; // False for every response but the last */
/* } */

// Secondary Index query request
message IndexRequest {
    enum IndexQueryType {
        exact = 0;
        range = 1;
    }

    required bytes bucket = 1;
    required bytes index = 2;
    required IndexQueryType qtype = 3;
    optional bytes key = 4; // key here means equals value for index?
    optional bytes range_min = 5;
    optional bytes range_max = 6;
    optional bool return_terms = 7;
    optional bool stream = 8;
    optional uint32 max_results = 9;
    optional bytes continuation = 10;
    optional uint32 timeout = 11;
    optional bytes type = 12;         // Bucket type, if not set we assume the 'default' type
    optional bytes term_regex = 13;
    // Whether to use pagination sort for non-paginated queries
    optional bool pagination_sort = 14;
    // parallel extraction extension
    optional bytes cover_context = 15; // chopped up coverage plan per-req
    optional bool return_body = 16; // Return values with keys, only works with $bucket/$key index queries

}

// Secondary Index query response
message IndexResponse {
    repeated bytes keys = 1;
    repeated Pair results = 2;
    optional bytes continuation = 3;
    optional bool done = 4;
}

// Stolen from CS bucket response, to be used when return_body=true
/* message IndexBodyResponse { */
/*     repeated RpbIndexObject objects = 1; */
/*     optional bytes continuation = 2; */
/*     optional bool done = 3; */
/* } */

/* message RpbIndexObject { */
/*     required bytes key = 1; */
/*     required GetResponse object = 2; */
/* } */

// Content message included in get/put responses
// Holds the value and associated metadata
message Content {
    required bytes value = 1;
    optional bytes content_type = 2;     // the media type/format
    optional bytes charset = 3;
    optional bytes content_encoding = 4;
    optional bytes vtag = 5;
    repeated Link links = 6;          // links to other resources
    optional uint32 last_mod = 7;
    optional uint32 last_mod_usecs = 8;
    repeated Pair usermeta = 9;       // user metadata stored with the object
    repeated Pair indexes = 10;       // user metadata stored with the object
    optional bool deleted = 11;
    optional uint32 ttl = 12;
}

// Link metadata
message Link {
    optional bytes bucket = 1;
    optional bytes key = 2;
    optional bytes tag = 3;
}

// Get bucket-key preflist request
/* message RpbGetBucketKeyPreflistReq { */
/*     required bytes bucket = 1; */
/*     required bytes key = 2; */
/*     optional bytes type = 3; */
/* } */

// Get bucket-key preflist response
/* message RpbGetBucketKeyPreflistResp { */
/*     repeated RpbBucketKeyPreflistItem preflist = 1; */
/* } */

// Preflist item
/* message RpbBucketKeyPreflistItem { */
/*     required int64 partition = 1; */
/*     required bytes node = 2; */
/*     required bool  primary = 3; */
/* } */


// Request a segmented coverage plan for the specified bucket
/* message RpbCoverageReq { */
/*     optional bytes type = 1;              // Bucket type, if not set we assume the 'default' type */
/*     required bytes bucket = 2; */
/*     optional uint32 min_partitions = 3;   // If undefined, we build a normal coverage plan. If <ring_size, we build a coverage plan with exactly ring_size entries, anything larger will have a power of 2 entries covering keyspaces smaller than a partition */
/*     optional bytes replace_cover = 4;     // For failure recovery */
/*     repeated bytes unavailable_cover = 5; // Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid */
/* } */

// Segmented coverage plan response
/* message RpbCoverageResp { */
/*    repeated RpbCoverageEntry entries = 1; */
/* } */

// Segment of a coverage plan
/* message RpbCoverageEntry { */
/*     required bytes ip = 1; */
/*     required uint32 port = 2; */
/*     optional bytes keyspace_desc = 3; // Some human readable description of the keyspace covered */
/*     required bytes cover_context = 4; // Opaque context to pass into 2I query. */
/* } */

/* message RpbSearchDoc { */
/*   repeated Pair fields = 1; */
/* } */

/* message RpbSearchQueryReq { */
/*   required bytes  q      =  1;  // Query string */
/*   required bytes  index  =  2;  // Index */
/*   optional uint32 rows   =  3;  // Limit rows */
/*   optional uint32 start  =  4;  // Starting offset */
/*   optional bytes  sort   =  5;  // Sort order */
/*   optional bytes  filter =  6;  // Inline fields filtering query */
/*   optional bytes  df     =  7;  // Default field */
/*   optional bytes  op     =  8;  // Default op */
/*   repeated bytes  fl     =  9;  // Return fields limit (for ids only, generally) */
/*   optional bytes  presort = 10; // Presort (key / score) */
/* } */

/* message RpbSearchQueryResp { */
/*   repeated RpbSearchDoc docs      = 1; // Result documents */
/*   optional float        max_score = 2; // Maximum score */
/*   optional uint32       num_found = 3; // Number of results */
/* } */

// Dispatch a query to Riak
/* message TsQueryReq { */
/*   // left optional to support parameterized queries in the future */
/*   optional TsInterpolation query = 1; */
/*   optional bool stream = 2 [default = false]; */
/*   optional bytes cover_context = 3; // chopped up coverage plan per-req */
/* } */

/* message TsQueryResp { */
/*   repeated TsColumnDescription columns = 1; */
/*   repeated TsRow rows = 2;  // 0 to n rows */
/*   optional bool done = 3 [default = true]; */
/* } */

/* message TsGetReq { */
/*   required bytes table = 1; */
/*   repeated TsCell key = 2; */
/*   optional uint32 timeout = 3; */
/* } */

/* message TsGetResp { */
/*   repeated TsColumnDescription columns = 1; */
/*   repeated TsRow rows = 2;  // 0 or 1 rows */
/* } */


/* message TsPutReq { */
/*   required bytes table = 1; */

/*   // optional: omitting it should use table order */
/*   repeated TsColumnDescription columns = 2; */

/*   repeated TsRow rows = 3; */
/* } */

/* message TsPutResp { */

/* } */

/* message TsDelReq { */
/*   required bytes table = 1; */
/*   repeated TsCell key = 2; */
/*   optional bytes vclock = 3; */
/*   optional uint32 timeout = 4; */
/* } */

/* message TsDelResp { */

/* } */

/* message TsInterpolation { */
/*   required bytes base = 1; */
/*   repeated Pair interpolations = 2; */
/* } */

/* enum TsColumnType { */
/*   VARCHAR = 0; */
/*   SINT64 = 1; */
/*   DOUBLE = 2; */
/*   TIMESTAMP = 3; */
/*   BOOLEAN = 4; */
/*   BLOB = 5; */
/* } */

/* message TsColumnDescription { */
/*   required bytes name = 1; */
/*   required TsColumnType type = 2; */
/* } */

/* message TsRow { */
/*   repeated TsCell cells = 1; */
/* } */

/* message TsCell { */
/*   optional bytes varchar_value = 1; */
/*   optional sint64 sint64_value = 2; */
/*   optional sint64 timestamp_value = 3; */
/*   optional bool boolean_value = 4; */
/*   optional double double_value = 5; */
/* } */

/* message TsListKeysReq { */
/*   required bytes table = 1; */
/*   optional uint32 timeout = 2; */
/* } */

/* message TsListKeysResp { */
/*   repeated TsRow keys = 1; */
/*   optional bool done = 2; */
/* } */

// Request a segmented coverage plan for this query
/* message TsCoverageReq { */
/*   // left optional to support parameterized queries in the future */
/*   optional TsInterpolation query = 1; */
/*   required bytes table = 2; */
/*   optional bytes replace_cover = 3;     // For failure recovery */
/*   repeated bytes unavailable_cover = 4; // Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid */
/* } */

// Segmented TS coverage plan response
/* message TsCoverageResp { */
/*    repeated TsCoverageEntry entries = 1; */
/* } */

// Segment of a TS coverage plan
/* message TsCoverageEntry { */
/*     required bytes ip = 1; */
/*     required uint32 port = 2; */
/*     required bytes cover_context = 3; // Opaque context to pass into follow-up request */
/*     optional TsRange range = 4; // Might be other types of coverage queries/responses */
/* } */

// Each prospective subquery has a range of valid time values
/* message TsRange { */
/*     required bytes field_name = 1; */
/*     required sint64 lower_bound = 2; */
/*     required bool lower_bound_inclusive = 3; */
/*     required sint64 upper_bound = 4; */
/*     required bool upper_bound_inclusive = 5; */
/*     required bytes desc = 6; // Some human readable description of the time range */
/* } */

/* message RpbYokozunaIndex { */
/*     required bytes name   =  1;  // Index name */
/*     optional bytes schema =  2;  // Schema name */
/*     optional uint32 n =  3;  // N value */
/* } */

// GET request - If a name is given, return matching index, else return all
/* message RpbYokozunaIndexGetReq { */
/*     optional bytes name  =  1;  // Index name */
/* } */

/* message RpbYokozunaIndexGetResp { */
/*     repeated RpbYokozunaIndex index  =  1; */
/* } */

// PUT request - Create a new index
/* message RpbYokozunaIndexPutReq { */
/*     required RpbYokozunaIndex index  =  1; */
/*     optional uint32 timeout          =  2; // Timeout value */
/* } */

// DELETE request - Remove an index
/* message RpbYokozunaIndexDeleteReq { */
/*     required bytes name  =  1;  // Index name */
/* } */

// Schema queries

/* message RpbYokozunaSchema { */
/*     required bytes name    =  1;  // Index name */
/*     optional bytes content =  2;  // Schema data */
/* } */

// PUT request - create or potentially update a new schema
/* message RpbYokozunaSchemaPutReq { */
/*     required RpbYokozunaSchema schema =  1; */
/* } */

// GET request - Return matching schema by name
/* message RpbYokozunaSchemaGetReq { */
/*     required bytes name  =  1;  // Schema name */
/* } */

/* message RpbYokozunaSchemaGetResp { */
/*   required RpbYokozunaSchema schema =  1; */
/* } */

message GetServerInfoRequest {}
message PingRequest {}
message DeleteResponse {}
message PingResponse {}
message ResetBucketPropertiesResponse {}
message SetBucketPropertiesResponse {}
message SetBucketTypePropertiesResponse {}
